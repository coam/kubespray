# [详解k8s组件Ingress边缘路由器并落地到微服务 - kubernetes](http://www.cnblogs.com/justmine/p/8991379.html)
# [Kubernetes traefik ingress使用](https://xuchao918.github.io/2019/03/01/Kubernetes-traefik-ingress%E4%BD%BF%E7%94%A8/)
# [开启Traefik的https](https://ronggle.com/2018/07/traefik-https/)
# [Kubernetes Ingress with Traefik](https://tonda100.github.io/Traefik/)
# [Kubernetes traefik ingress使用](https://xuchao918.github.io/2019/03/01/Kubernetes-traefik-ingress%E4%BD%BF%E7%94%A8/)
# [kubernetes的Ingrss之Traefik](http://blog.whysdomain.com/blog/244/)

#[Deploying Traefik as Ingress Controller for Your Kubernetes Cluster](https://supergiant.io/blog/using-traefik-as-ingress-controller-for-your-kubernetes-cluster/)

# 创建 [ingress-rbac.yaml]
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-traefik-controller-serviceaccount
  namespace: coam-dev-nginx-ns
  labels:
    app.kubernetes.io/name: coam-dev-nginx-ns
    app.kubernetes.io/part-of: coam-dev-nginx-ns

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ingress-traefik-controller-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ingress-traefik-controller-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-traefik-controller-clusterrole
subjects:
  - kind: ServiceAccount
    name: ingress-traefik-controller-serviceaccount
    namespace: coam-dev-nginx-ns

---
# 使用DaemonSet类型来部署Traefik，并使用nodeSelector来限定Traefik所部署的主机。
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ingress-traefik-loadbalancer
  namespace: coam-dev-nginx-ns
  labels:
    app: ingress-traefik-loadbalancer
    version: v-0.0.1
spec:
  selector:
    matchLabels:
      app: ingress-traefik-loadbalancer
      version: v-0.0.1
  template:
    metadata:
      labels:
        app: ingress-traefik-loadbalancer
        version: v-0.0.1
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      terminationGracePeriodSeconds: 60
      hostNetwork: true
      nodeName: t.cs.1
      #nodeSelector:
      #  edgenode: "true"
      restartPolicy: Always
      serviceAccountName: ingress-traefik-controller-serviceaccount
      containers:
        - image: traefik:v2.0.1
        #- image: traefik:v1.7.14-alpine
          name: ingress-traefik-loadbalancer
          resources:
            limits:
              cpu: 200m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 50Mi
          ports:
            - name: http
              containerPort: 80
              #hostPort: 80
            - name: https
              containerPort: 443
              #hostPort: 443
            - name: admin
              # 默认端口: 8080
              #containerPort: 8080
              containerPort: 8383
              #hostPort: 8383
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          args:
            # [api 和 web 不能同时使用,否则 (- --web.address=:8383) 无效][Traefik ignores --web.address= #2837](https://github.com/containous/traefik/issues/2837)
            #- --api
            - --web
            - --web.address=:8383
            - --web.metrics.prometheus
            - --kubernetes
            #- --logLevel=INFO
            - --logLevel=DEBUG
            - --defaultentrypoints=http,https
            - --entrypoints=Name:https Address::443 TLS Compress:true
            - --entrypoints=Name:http Address::80 Compress:true
            #- --entrypoints=Name:http Address::80 Redirect.EntryPoint:https
            #- --insecureSkipVerify=true
            #- --acme=true
            #- --acme.entrypoint=https
            #- --acme.httpchallenge
            #- --acme.httpchallenge.entrypoint=http
            #- --acme.domains=www.hostynskaosma.cz
            #- --acme.email=myemail@mydomain.com
            #- --acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
            #- --acme.storage=/tmp/acme.json

#[kubernetes dashboard 升级之路](https://www.qikqiak.com/post/update-kubernetes-dashboard-more-secure/)
#htpasswd -bc traefik-auth admin admin
#kubectl create secret generic traefik-basic-auth --from-file=traefik-auth --namespace=coam-dev-nginx-ns

---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: traefik-basic-auth
  namespace: coam-dev-nginx-ns
data:
  traefik-auth: YWRtaW46JGFwcjEkQmYud3VHRlckaFNYb3AwNFEvenoxd2paMzBNRTI3Lgo=

# 配置 web 控制台
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-admin-web
  namespace: coam-dev-nginx-ns
spec:
  #type: NodePort
  type: LoadBalancer
  selector:
    app: ingress-traefik-loadbalancer
    version: v-0.0.1
  ports:
    - name: http-isp-traefik-80
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https-isp-traefik-443
      port: 443
      targetPort: 443
      protocol: TCP
    - name: http-isp-traefik-8383
      port: 8383
      #- --api
      #targetPort: 8080
      #- --web
      targetPort: 8383
      nodePort: 30838
      protocol: TCP

# [web]后台访问地址配置 -- [](http://os.iirii.com:30838/dashboard)
# [web.metrics]后台访问地址配置 -- [](http://os.iirii.com:30838/metrics)
#hostNetwork: false

# [web]后台访问地址配置 -- [](https://traefik-1-tcs.iirii.com/dashboard/)
# [web.metrics]访问地址配置 -- [](https://traefik-1-tcs.iirii.com/metrics)
#hostNetwork: true


# 跨空间访问服务
#---
#kind: Service
#apiVersion: v1
#metadata:
#  name: us-docs
#  namespace: coam-dev-nginx-ns
#spec:
#  type: ExternalName
#  externalName: us-docs.coam-prod-docs-ns.svc.cluster.local
#  #externalName: nocs.cn
#  ports:
#    - port: 5000
#      targetPort: 5000
#      protocol: TCP